#include <iostream>

using namespace std;

template<typename T>
class Node
{
public:
	Node* pNext;
	T data;

	Node(T data = T(), Node* pNext = nullptr)
	{
		this->data = data;
		this->pNext = pNext;
	}
};

template<typename T>
class List : public Node<T>
{
protected:

	int Size;

	Node<T>* head = nullptr;
	Node<T>* tail = nullptr;

public:

	int GetSize()
	{
		return Size;
	}

	T& operator[](const int index)
	{
		int counter = 0;

		Node<T>* current = this->head;

		while (current != nullptr)
		{
			if (counter == index)
			{
				return current->data;
			}
			current = current->pNext;
			counter++;
		}
	}

	void clear()
	{
		while (Size)
		{
			Node<T>* temp = head;
			head = head->pNext;
			delete temp;
			Size--;
		}
	}

	void add_element_steck(T data)
	{
		Node<T>* head = new Node(data, head);
		this->Size++;
	}

	void add_element_queue(T data) 
	{
		if (this->head == nullptr)
		{
			Node<T>* head = new Node(data, head);
		}
		else
		{
			Node<T>* current = this->head;

			while (current->pNext != nullptr)
			{
				current = current->pNext;
			}
			current->pNext = new Node<T>(data);

		}

		this->Size++;
	}

};

//template<typename T>
//class Steck : public List<T>
/* {

public:

	~Steck()
	{
		auto clear();
	}
	void add_element(T data) override
	{
		Node* head = new Node(data, head);
		this->Size++;
	}
};*/

/*template<typename T>
class Queue : public List<T>
{
public:
	~Queue()
	{
		auto clear();
	}
	void add_element(T data) override
	{
		if (this->head == nullptr)
		{
			Node<T>* head = new Node(data, head);
		}
		else
		{
			Node<T>* current = this->head;

			while (current->pNext != nullptr)
			{
				current = current->pNext;
			}
			current->pNext = new Node<T>(data);

		}

		this->Size++;
	}
};*/


int main()
{

	setlocale(LC_ALL, "ru");

	List<int> steck;


	List<int> queue;


	for (int i = 0; i < 3; i++)
	{
		steck.add_element_steck(i);
		queue.add_element_queue(i);
	}

	cout << "Стек: " << endl;
	for (int i = 0; i < steck.GetSize(); i++)
	{
		cout << steck[i] << " ";
	}

	cout << endl << "Очередь: " << endl;
	for (int i = 0; i < queue.GetSize(); i++)
	{
		cout << queue[i] << " ";
	}

	return 0;
}


