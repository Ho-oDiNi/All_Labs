/*
Лабораторная работа 5. Консоль управления моделью Simple Computer. Клавиатура. Обработка нажатия клавиш. Неканонический режим работы терминала
	Цель работы
		Изучить устройство клавиатуры и принципы обработки нажатия клавиш в текстовом терминале. Создать «распознаватель» нажатой клавиши по формируемой последовательности символов.
		Разработать библиотеку myReadkey. Доработать интерфейс консоли управления Simple Computer так, чтобы можно было изменять значения ячеек памяти и регистров.
	Задание на лабораторную работу
		1. Прочитайте главу 5 практикума по курсу «Организация ЭВМ и систем». Обратите особое внимание на параграф 5.1. Изучите страницу man для команд infocmp и read , базы terminfo .
		2. Используя оболочку bash и команду read , определите последовательности, формируемые нажатием на буквенно-цифровые, функциональные клавиши и клавиши управления курсором. Используя команду infocmp , убедитесь, что получены правильные последовательности символов, генерируемые функциональными клавишами «F5» и «F6».
		3. Разработайте функции:
			- int rk_readkey (enum keys *) - анализирующую последовательность символов (возвращаемых функцией read при чтении с терминала) и возвращающую первую клавишу, которую нажал пользователь. В качестве параметра в функцию передаётся адрес переменной, в которую возвращается номер нажатой (enum keys – перечисление распознаваемых клавиш);
			- int rk_mytermsave (void) - сохраняет текущие параметры терминала;
			- int rk_mytermrestore (void) - восстанавливает сохранённые параметры терминала.
			- int rk_mytermregime (int regime, int vtime, int vmin, int echo, int sigint) - переключает терминала между режимами. Для неканонического режима используются значения второго и последующего параметров.
		4. Оформите разработанные функции как статическую библиотеку myReadkey. Подготовьте заголовочный файл для неё.
*/

#ifndef KEYBOARD_H
#define KEYBOARD_H

#include <termios.h>
#include <stdio.h>
#include <sys/types.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

enum keys {
	KEY_l,
	KEY_s,
	KEY_r,
	KEY_t,
	KEY_i,
	KEY_q,
	KEY_f5,
	KEY_f6,
	KEY_up,
	KEY_down,
	KEY_left,
	KEY_right,
	KEY_enter,
	KEY_other
};

int rk_readkey(int *key);
int rk_mytermsave();
int rk_mytermrestore();
int rk_mytermregime(int regime, int vtime, int vmin, int echo, int sigint);


#endif
