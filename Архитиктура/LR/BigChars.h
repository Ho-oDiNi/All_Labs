/*
Лабораторная работа 4. Консоль управления моделью Simple Computer. Псевдографика. «Большие символы».
	Цель работы
		Изучить работу текстового терминала с псевдографическими символами. Понять, что такое шрифт и как он используется в терминалах при выводе информации. Разработать библиотеку myBigChars, реализующую функции по работе с псевдографикой и выводу «больших символов» на экран. Доработать консоль управления Simple Computer так, чтобы выводились псевдографические элементы.
	Задание на лабораторную работу.
		1. Прочитайте главу 5 практикума по курсу «Организация ЭВМ и систем». Обратите особое внимание на параграфы 5.2, 5.3, 5.4.2. Изучите страницу man для команды infocmp , базы terminfo (раздел псевдографика).
		2. Используя оболочку bash и команду infocmp , определите escape-последовательности для переключения используемых терминалом кодировочных таблиц (enter_alt_charset_mode и exit_alt_charset_mode) и соответствие символов для вывода псевдографики (acs_chars).
		3. Используя оболочку bash , команду echo –e и скрипт, проверьте работу полученных последовательностей. Символ escape задается как \033 или \E. Например - echo -e "\033[m". Для проверки сформируйте последовательность escape-команд, выполняющую следующие действия:
			a. очищает экран;
			b. выводит псевдографическую рамку, начиная с 5 символа 10 строки, размером 8 строк на 8 столбцов;
			c. с помощью псевдографического символа «закрашенный прямоугольник» (ACS_CKBOARD) в рамке выводится большой символ, соответствующий последней цифре дня вашего рождения (например, день рождения 13 января 1991 года, выводится цифра 3).
		4. Разработать следующие функции:
			a. int bc_printA (char * str) - выводит строку символов с использованием дополнительной кодировочной таблицы;
			b. int bc_box(int x1, int y1, int x2, int y2) - выводит на экран псевдографическую рамку, в которой левый верхний угол располагается в строке x1 и столбце y1, а еѐ ширина и высота равна y2 столбцов и x2 строк;
			c. int bc_printbigchar (int [2], int x, int y, enum color, enum color) - выводит на экран "большой символ" размером восемь строк на восемь столбцов, левый верхний угол которого располагается в строке x и столбце y. Третий и четвѐртый параметры определяют цвет и фон выводимых символов. "Символ" выводится исходя из значений массива целых чисел следующим образом. В первой строке выводится 8 младших бит первого числа, во второй следующие 8, в третьей и 4 следующие. В 5 строке выводятся 8 младших бит второго числа и т.д. При этом если значение бита = 0, то выводится символ "пробел", иначе - символ, закрашивающий знакоместо (ACS_CKBOARD);
			d. int bc_setbigcharpos (int * big, int x, int y, int value) - устанавливает значение знакоместа "большого символа" в строке x и столбце y в значение value;
			e. int bc_getbigcharpos(int * big, int x, int y, int *value) - возвращает значение позиции в "большом символе" в строке x и столбце y;
			f. int bc_bigcharwrite (int fd, int * big, int count) - записывает заданное число "больших символов" в файл. Формат записи определяется пользователем;
			g. int bc_bigcharread (int fd, int * big, int need_count, int * count) считывает из файла заданное количество "больших символов". Третий параметр указывает адрес переменной, в которую помещается количество считанных символов или 0, в случае ошибки.
			Все функции возвращают 0 в случае успешного выполнения и -1 в случае ошибки. В качестве терминала используется стандартный поток вывода.
		5. Оформите разработанные функции как статическую библиотеку myBigChars. Подготовьте заголовочный файл для неѐ.
*/

#ifndef BIGCHARS_H
#define BIGCHARS_H

#include "BigChars.h"
#include "terminal.h"

#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>

#define BOXCHAR_REC 'a'
#define BOXCHAR_BR "j"
#define BOXCHAR_BL "m"
#define BOXCHAR_TR "k"
#define BOXCHAR_TL "l"
#define BOXCHAR_VERT "x"
#define BOXCHAR_HOR "q"

int bc_printA(char *str);
int bc_box(int x1, int y1, int x2, int y2);
int bc_printbigchar(int *big, int x, int y, enum colors fg, enum colors bg);
int bc_setbigcharpos(int *big, int x, int y, int value);
int bc_bigcharwrite(int fd, int *big, int count);
int bc_bigcharread(int fd, int *big, int need_count, int *count);

#endif

/*
int bcint0 [2] = {1717976064, 3958374};	//0b01100110011001100011110000000000, 0b00000000001111000110011001100110
int bcint1 [2] = {1010315264, 3158064};	//0b00111100001110000011000000000000, 0b00000000001100000011000000110000
int bcint2 [2] = {1010842624, 8258050};	//0b00111100010000000011110000000000, 0b00000000011111100000001000000010
int bcint3 [2] = {2120252928, 8282238};	//0b01111110011000000111111000000000, 0b00000000011111100110000001111110
int bcint4 [2] = {2120640000, 6316158};	//0b01111110011001100110011000000000, 0b00000000011000000110000001111110
int bcint5 [2] = {1040350720, 4079680};	//0b00111110000000100111111000000000, 0b00000000001111100100000001000000
int bcint6 [2] = {35789824, 1974814};	//0b00000010001000100001110000000000, 0b00000000000111100010001000011110
int bcint7 [2] = {811630080, 396312};	//0b00110000011000000111111000000000, 0b00000000000001100000110000011000
int bcint8 [2] = {1013332992, 3958374};	//0b00111100011001100011110000000000, 0b00000000001111000110011001100110;
int bcint9 [2] = {2087074816, 3956832};	//0b01111100011001100011110000000000, 0b00000000001111000110000001100000
int bcintA [2] = {2118269952, 4342338};	//0b01111110010000100011110000000000, 0b00000000010000100100001001000010
int bcintB [2] = {1044528640, 4080194};	//0b00111110010000100011111000000000, 0b00000000001111100100001001000010
int bcintC [2] = {37895168, 3949058};	//0b00000010010000100011110000000000, 0b00000000001111000100001000000010
int bcintD [2] = {1111637504, 4080194};	//0b01000010010000100011111000000000, 0b00000000001111100100001001000010
int bcintE [2] = {2114092544, 8258050};	//0b01111110000000100111111000000000, 0b00000000011111100000001000000010
int bcintF [2] = {33717760, 131646};	//0b00000010000000100111111000000000, 0b00000000000000100000001000111110
int bcintp [2] = {2115508224, 1579134};	//0b01111110000110000001100000000000, 0b00000000000110000001100001111110





--------
--@@@@--
-@@--@@-
-@@--@@-
-@@--@@-
-@@--@@-
--@@@@--
--------

--------
----@@--
---@@@--
--@@@@--
----@@--
----@@--
----@@--
--------

--------
--@@@@--
------@-
--@@@@--
-@------
-@------
-@@@@@@-
--------

--------
-@@@@@@-
-----@@-
-@@@@@@-
-@@@@@@-
-----@@-
-@@@@@@-
--------

--------
-@@--@@-
-@@--@@-
-@@@@@@-
-@@@@@@-
-----@@-
-----@@-
--------

--------
-@@@@@@-
-@------
-@@@@@--
------@-
------@-
-@@@@@--
--------

--------
--@@@---
-@---@--
-@------
-@@@@---
-@---@--
-@@@@---
--------

--------
-@@@@@@-
-----@@-
----@@--
---@@---
--@@----
-@@-----
--------

--------
--@@@@--
-@@--@@-
--@@@@--
-@@--@@-
-@@--@@-
--@@@@--
--------

--------
--@@@@--
-@@--@@-
--@@@@@-
-----@@-
-----@@-
--@@@@--
--------
 



--------
--@@@@--
-@----@-
-@@@@@@-
-@----@-
-@----@-
-@----@-
--------



--------
-@@@@@--
-@----@-
-@@@@@--
-@----@-
-@----@-
-@@@@@--
--------


--------
--@@@@--
-@----@-
-@------
-@------
-@----@-
--@@@@--
--------


--------
-@@@@@--
-@----@-
-@----@-
-@----@-
-@----@-
-@@@@@--
--------


--------
-@@@@@@-
-@------
-@@@@@@-
-@------
-@------
-@@@@@@-
--------


--------
-@@@@@@-
-@------
-@------
-@@@@@--
-@------
-@------
--------



--------
---@@---
---@@---
-@@@@@@-
-@@@@@@-
---@@---
---@@---
--------

*/
