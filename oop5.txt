#include <iostream>
using namespace std;

class Node
{
public:
	Node* pNext;
	int data;

	Node()
	{
		data = 0;
		pNext = nullptr;
	}

	Node(int data, Node* pNext = nullptr)
	{
		this->data = data;
		this->pNext = pNext;
	}
};


class List: public Node
{
protected:
	int Size;
	Node* head;
	Node* tail;

public:

	int GetSize() 
	{ 
		return Size; 
	}

	int& operator[](const int index)
	{
		int counter = 0;

		Node* current = this->head;

		while (current != nullptr)
		{
			if (counter == index)
			{
				return current->data;
			}
			current = current->pNext;
			counter++;
		}
	}

	void clear()
	{
		while (Size)
		{
			Node* temp = head;
			head = head->pNext;
			delete temp;
			Size--;
		}
	}

	virtual void add_element(int data) {};
};

class Steck : public List
{
public:
	Steck()
	{
		head = nullptr;
		tail = nullptr;
	}
	~Steck()
	{
		clear();
	}
	void add_element(int data)
	{
		head = new Node(data, head);
		Size++;
	}
};

class Queue : public List
{
public:
	Queue()
	{
		head = nullptr;
		tail = nullptr;
	}
	~Queue()
	{
		clear();
	}
	void add_element(int data)
	{
		if (head == nullptr)
		{
			head = new Node(data);
		}
		else
		{
			Node* current = this->head;

			while (current->pNext != nullptr)
			{
				current = current->pNext;
			}
			current->pNext = new Node(data);

		}

		Size++;
	}
};


int main()
{

	setlocale(LC_ALL, "ru");
	Steck steck;
	Queue queue;

	for (int i = 0; i < 3; i++)
	{
		steck.add_element(i);
		queue.add_element(i);
	}

	cout << "Стек: " << endl;
	for (int i = 0; i < steck.GetSize(); i++)
	{
		cout << steck[i] << " ";
	}

	cout << endl << "Очередь: " << endl;
	for (int i = 0; i < queue.GetSize(); i++)
	{
		cout << queue[i] << " ";
	}

	return 0;
}

